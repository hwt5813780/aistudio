{"remainingRequest":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\writing\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\writing\\index.vue","mtime":1681885358765},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1678687255549},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1678687256835}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcicKaW1wb3J0IEZpbGVTYXZlciBmcm9tICdmaWxlLXNhdmVyJwppbXBvcnQgeyB3cml0ZSwgdXRpbHMgfSBmcm9tICd4bHN4JzsKCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGV4dGFyZWE6ICcnLAogICAgICBpbnB1dDogJycsCiAgICAgIHJlc3VsdDogJycsCiAgICAgIHN0YWdlOiBmYWxzZSwKICAgICAgdmlzaWJsZTogZmFsc2UsCiAgICAgIGZpbGVMaXN0OiAnJywKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICB9CiAgfSwKICBiZWZvcmVDcmVhdGUoKSB7CiAgICAvLyDor7vlj5bmlofku7YKICAgIEZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRpbmcgPSBmdW5jdGlvbih7IGVuY29kZSB9ID0gJ3BtcycpIHsKICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh0aGlzLnJlc3VsdCkgLy8g5peg56ym5Y+35pW05Z6L5pWw57uECiAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RlIHx8ICdVVEYtOCcpLmRlY29kZShieXRlcykKICAgICAgcmV0dXJuIHRleHQKICAgIH0KICAgIC8qIOmHjeWGmXJlYWRBc0JpbmFyeVN0cmluZ+WHveaVsCAqLwogICAgRmlsZVJlYWRlci5wcm90b3R5cGUucmVhZEFzQmluYXJ5U3RyaW5nID0gZnVuY3Rpb24oZikgewogICAgICAvLyDlpoLmnpx0aGlz5pyq6YeN5YaZb25sb2Fk5Ye95pWw77yM5YiZ5Yib5bu65LiA5Liq5YWs5YWx5aSE55CG5pa55byPCiAgICAgIGlmICghdGhpcy5vbmxvYWQpIHsKICAgICAgICB0aGlzLm9ubG9hZCA9IGUgPT4geyAvLyDlnKh0aGlzLm9ubG9hZOWHveaVsOS4re+8jOWujOaIkOWFrOWFseWkhOeQhgogICAgICAgICAgY29uc3QgcnMgPSB0aGlzLnJlYWRpbmcoKQogICAgICAgICAgY29uc29sZS5sb2cocnMpCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMucmVhZEFzQXJyYXlCdWZmZXIoZikgLy8g5YaF6YOo5Lya5Zue6LCDdGhpcy5vbmxvYWTmlrnms5UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKCiAgICAvL+WvvOWHumV4Y2VsCiAgICBoYW5kbGVEb3dubG9hZChuYW1lKSB7CiAgICAgIGxldCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJleGNlbF90YWJsZSIpCiAgICAgIGxldCBldCA9IHV0aWxzLnRhYmxlX3RvX2Jvb2sodGFibGUpCiAgICAgIGxldCBvdXRwdXQgPSB3cml0ZShldCwgewogICAgICAgIGJvb2tUeXBlOiAieGxzeCIsCiAgICAgICAgYm9va1NTVDogdHJ1ZSwKICAgICAgICB0eXBlOiAiYXJyYXkiCiAgICAgIH0pCgogICAgICB0cnkgewogICAgICAgIEZpbGVTYXZlci5zYXZlQXMobmV3IEJsb2IoW291dHB1dF0sIHsgdHlwZTogImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIgfSksIGAke25hbWV9Lnhsc3hgKQogICAgICB9IGNhdGNoIChlKSB7IH0KCiAgICAgIHJldHVybiBvdXRwdXQKICAgIH0sCiAgICBlcnJvckNvcnJlY3QoKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpcwogICAgICB0aGF0LmxvYWRpbmcgPSB0cnVlCiAgICAgIHZhciBjb250ZXh0ID0gdGhhdC50ZXh0YXJlYQogICAgICB2YXIga2V5ID0gdGhhdC5pbnB1dAogICAgICBpZiAoY29udGV4dCA9PT0gJycgfHwga2V5ID09PSAnJykgewogICAgICAgIHRoaXMuJG1lc3NhZ2UoewogICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+i+k+WFpeWGheWuueS4jeiDveS4uuepuicsCiAgICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgICB9KQogICAgICAgIHRoYXQucmVzdWx0ID0gJycKICAgICAgICB0aGF0LnZpc2libGUgPSBmYWxzZQogICAgICB9IGVsc2UgewogICAgICAgIC8vIOivt+axguWQjuerr0FQSeacjeWKoe+8jOivt+axguaWueazleS4unBvc3TvvIzor7fmsYLkvZPlrZfmrrXkuLpqc29u5qC85byPIHRleHQKICAgICAgICBheGlvcy5wb3N0KCdodHRwOi8vMTcyLjIxLjEwOC41Nzo4MDAwL2FwaS9ncHQvdGV4dENvcnJlY3QnLCB7CiAgICAgICAgICB0ZXh0OiB0aGF0LnRleHRhcmVhLAogICAgICAgICAga2V5OiB0aGF0LmlucHV0CiAgICAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKQogICAgICAgICAgdGhhdC5yZXN1bHQgPSByZXNwb25zZS5kYXRhLmNvcnJlY3Rpb25SZXN1bHRzLnRvU3RyaW5nKCkKICAgICAgICAgIHRoYXQudGFibGVEYXRhID0gcmVzcG9uc2UuZGF0YS5jb3JyZWN0aW9uUmVzdWx0cwogICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5jb3JyZWN0aW9uUmVzdWx0cykKICAgICAgICAgIHRoYXQudmlzaWJsZSA9IHRydWUKICAgICAgICAgIHRoYXQubG9hZGluZyA9IGZhbHNlCiAgICAgICAgICB0aGF0LiRtZXNzYWdlKHsKICAgICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgICAgICBtZXNzYWdlOiAnU3VjY2Vzc++8gScsCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICAgICAgfSkKICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgICAgICAgdGhhdC5yZXN1bHQgPSAnJwogICAgICAgICAgdGhhdC52aXNpYmxlID0gZmFsc2UKICAgICAgICAgIHRoYXQuJG1lc3NhZ2UoewogICAgICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgICAgIG1lc3NhZ2U6ICfor7fmsYLlh7rnjrDlvILluLjvvIEnLAogICAgICAgICAgICB0eXBlOiAnZXJyb3InCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCiAgICBiZWZvcmVVcGxvYWQoZmlsZSkgewogICAgICB0aGlzLmZpbGVMaXN0ID0gW2ZpbGVdCiAgICAgIC8vIOivu+WPlnR4dOaWh+S7tgogICAgICB0aGlzLnJlYWQoZmlsZSkKICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgIG1lc3NhZ2U6ICd0eHTmlofmnKzlhoXlrrnlr7zlhaXmiJDlip/vvIEnLAogICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICB9KQogICAgICByZXR1cm4gZmFsc2UKICAgIH0sCiAgICByZWFkKGYpIHsKICAgICAgY29uc3QgcmQgPSBuZXcgRmlsZVJlYWRlcigpCiAgICAgIHZhciB0aGF0ID0gdGhpcwogICAgICByZC5vbmxvYWQgPSBlID0+IHsKICAgICAgLy8gdGhpcy5yZWFkQXNBcnJheUJ1ZmZlcuWHveaVsOWGhe+8jOS8muWbnuiwg3RoaXMub25sb2Fk5Ye95pWw44CC5Zyo6L+Z6YeM5aSE55CG57uT5p6cCiAgICAgICAgY29uc3QgY29udCA9IHJkLnJlYWRpbmcoeyBlbmNvZGU6ICdVVEYtOCcgfSkKICAgICAgICBjb25zb2xlLmxvZyhjb250KQogICAgICAgIHRoYXQudGV4dGFyZWEgPSBjb250CiAgICAgIH0KICAgICAgcmQucmVhZEFzQmluYXJ5U3RyaW5nKGYpCiAgICB9LAogICAgc2F2ZVJlc3VsdCgpIHsKICAgICAgdmFyIHRlbXBEYXRhID0gdGhpcy5yZXN1bHQKICAgICAgaWYgKHRlbXBEYXRhID09PSAnJykgewogICAgICAgIHRoaXMuJG1lc3NhZ2UoewogICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+i+k+WFpeWGheWuueS4uuepuu+8gScsCiAgICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgICB9KQogICAgICB9IGVsc2UgewogICAgICAgIHZhciB0ZW1wUmVzdWx0ID0gbmV3IEJsb2IoW3RlbXBEYXRhXSwgeyB0eXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04JyB9KQogICAgICAgIHNhdmVBcyh0ZW1wUmVzdWx0LCAnQ2hhdEdQVOe7k+aenC50eHQnKQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA0BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/writing","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-col :span=\"12\">\n    <div class=\"tip\">\n      请输入需要提取的文本:\n    </div>\n    <el-input v-model=\"textarea\" type=\"textarea\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable />\n    <div class=\"tip\" style=\"padding-top:10px\">\n      请输入提取的信息类型（用逗号隔开）:\n    </div>\n    <el-input v-model=\"input\" type=\"input\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable/>\n    <div style=\"padding-top:10px;padding-bottom:10px;\">\n      <el-button type=\"primary\" @click=\"errorCorrect()\" :loading='loading'>开始提取</el-button>\n      <el-button type=\"basic\"  style=\"margin-left:24px;margin-top:16px;\" @click=\"handleDownload('text-demo')\">导出Excel</el-button>\n    </div>\n    </el-col>\n    <el-col :span=\"12\">\n    <el-table v-loading=\"loading\" id=\"excel_table\" :data=\"tableData\" style=\"width: 100%;margin-left:48px;margin-right:48px;\">\n        <el-table-column prop=\"prompt\" label=\"Prompt\"></el-table-column>\n        <el-table-column prop=\"value\" label=\"Value\"></el-table-column>\n    </el-table>\n    </el-col>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { saveAs } from 'file-saver'\nimport FileSaver from 'file-saver'\nimport { write, utils } from 'xlsx';\n\nexport default {\n  data() {\n    return {\n      textarea: '',\n      input: '',\n      result: '',\n      stage: false,\n      visible: false,\n      fileList: '',\n      tableData: [],\n      loading: false,\n    }\n  },\n  beforeCreate() {\n    // 读取文件\n    FileReader.prototype.reading = function({ encode } = 'pms') {\n      const bytes = new Uint8Array(this.result) // 无符号整型数组\n      const text = new TextDecoder(encode || 'UTF-8').decode(bytes)\n      return text\n    }\n    /* 重写readAsBinaryString函数 */\n    FileReader.prototype.readAsBinaryString = function(f) {\n      // 如果this未重写onload函数，则创建一个公共处理方式\n      if (!this.onload) {\n        this.onload = e => { // 在this.onload函数中，完成公共处理\n          const rs = this.reading()\n          console.log(rs)\n        }\n      }\n      this.readAsArrayBuffer(f) // 内部会回调this.onload方法\n    }\n  },\n  methods: {\n\n    //导出excel\n    handleDownload(name) {\n      let table = document.getElementById(\"excel_table\")\n      let et = utils.table_to_book(table)\n      let output = write(et, {\n        bookType: \"xlsx\",\n        bookSST: true,\n        type: \"array\"\n      })\n\n      try {\n        FileSaver.saveAs(new Blob([output], { type: \"application/octet-stream\" }), `${name}.xlsx`)\n      } catch (e) { }\n\n      return output\n    },\n    errorCorrect() {\n      var that = this\n      that.loading = true\n      var context = that.textarea\n      var key = that.input\n      if (context === '' || key === '') {\n        this.$message({\n          showClose: true,\n          message: '输入内容不能为空',\n          type: 'warning'\n        })\n        that.result = ''\n        that.visible = false\n      } else {\n        // 请求后端API服务，请求方法为post，请求体字段为json格式 text\n        axios.post('http://172.21.108.57:8000/api/gpt/textCorrect', {\n          text: that.textarea,\n          key: that.input\n        }).then((response) => {\n          console.log(response)\n          that.result = response.data.correctionResults.toString()\n          that.tableData = response.data.correctionResults\n          console.log(response.data.correctionResults)\n          that.visible = true\n          that.loading = false\n          that.$message({\n            showClose: true,\n            message: 'Success！',\n            type: 'success'\n          })\n        }).catch((error) => {\n          console.log(error)\n          that.result = ''\n          that.visible = false\n          that.$message({\n            showClose: true,\n            message: '请求出现异常！',\n            type: 'error'\n          })\n        })\n      }\n    },\n    beforeUpload(file) {\n      this.fileList = [file]\n      // 读取txt文件\n      this.read(file)\n      this.$message({\n        showClose: true,\n        message: 'txt文本内容导入成功！',\n        type: 'success'\n      })\n      return false\n    },\n    read(f) {\n      const rd = new FileReader()\n      var that = this\n      rd.onload = e => {\n      // this.readAsArrayBuffer函数内，会回调this.onload函数。在这里处理结果\n        const cont = rd.reading({ encode: 'UTF-8' })\n        console.log(cont)\n        that.textarea = cont\n      }\n      rd.readAsBinaryString(f)\n    },\n    saveResult() {\n      var tempData = this.result\n      if (tempData === '') {\n        this.$message({\n          showClose: true,\n          message: '输入内容为空！',\n          type: 'warning'\n        })\n      } else {\n        var tempResult = new Blob([tempData], { type: 'text/plain;charset=utf-8' })\n        saveAs(tempResult, 'ChatGPT结果.txt')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .tip {\n    font-family: Helvetica Neue, Arial, Helvetica, sans-serif;\n\tfont-size: 14px;\n\tfont-weight:normal;\n\tmargin-top: 10px;\n  margin-bottom: 10px;\n  }\n</style>\n"]}]}