{"remainingRequest":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MLAIII\\MLAI\\frontend\\src\\views\\onlinecsc\\index.vue?vue&type=style&index=0&id=42861c19&scoped=true&lang=css&","dependencies":[{"path":"D:\\MLAIII\\MLAI\\frontend\\src\\views\\onlinecsc\\index.vue","mtime":1679291349097},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1678687253994},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1678687258269},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1678687255543},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1678687256835}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgLnRpcCB7CiAgICBmb250LWZhbWlseTogSGVsdmV0aWNhIE5ldWUsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7Cglmb250LXNpemU6IDE0cHg7Cglmb250LXdlaWdodDpub3JtYWw7CgltYXJnaW4tdG9wOiAxMHB4OwogIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA4KA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/onlinecsc","sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-col :span=\"12\">\r\n    <div class=\"tip\">\r\n      请输入需要提取的文本:\r\n    </div>\r\n    <el-input v-model=\"textarea\" type=\"textarea\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable />\r\n    <div class=\"tip\" style=\"padding-top:10px\">\r\n      请输入提取的信息类型（用逗号隔开）:\r\n    </div>\r\n    <el-input v-model=\"input\" type=\"input\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable/>\r\n    <div style=\"padding-top:10px;padding-bottom:10px;\">\r\n      <el-button type=\"primary\" @click=\"errorCorrect()\" :loading='loading'>开始提取</el-button>\r\n      <el-button type=\"basic\"  style=\"margin-left:24px;margin-top:16px;\" @click=\"handleDownload('text-demo')\">导出Excel</el-button>\r\n    </div>\r\n    </el-col>\r\n    <el-col :span=\"12\">\r\n    <el-table v-loading=\"loading\" id=\"excel_table\" :data=\"tableData\" style=\"width: 100%;margin-left:48px;margin-right:48px;\">\r\n        <el-table-column prop=\"prompt\" label=\"Prompt\"></el-table-column>\r\n        <el-table-column prop=\"value\" label=\"Value\"></el-table-column>\r\n    </el-table>\r\n    </el-col>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { saveAs } from 'file-saver'\r\nimport FileSaver from 'file-saver'\r\nimport { write, utils } from 'xlsx';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      textarea: '',\r\n      input: '',\r\n      result: '',\r\n      stage: false,\r\n      visible: false,\r\n      fileList: '',\r\n      tableData: [],\r\n      loading: false,\r\n    }\r\n  },\r\n  beforeCreate() {\r\n    // 读取文件\r\n    FileReader.prototype.reading = function({ encode } = 'pms') {\r\n      const bytes = new Uint8Array(this.result) // 无符号整型数组\r\n      const text = new TextDecoder(encode || 'UTF-8').decode(bytes)\r\n      return text\r\n    }\r\n    /* 重写readAsBinaryString函数 */\r\n    FileReader.prototype.readAsBinaryString = function(f) {\r\n      // 如果this未重写onload函数，则创建一个公共处理方式\r\n      if (!this.onload) {\r\n        this.onload = e => { // 在this.onload函数中，完成公共处理\r\n          const rs = this.reading()\r\n          console.log(rs)\r\n        }\r\n      }\r\n      this.readAsArrayBuffer(f) // 内部会回调this.onload方法\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    //导出excel\r\n    handleDownload(name) {\r\n      let table = document.getElementById(\"excel_table\")\r\n      let et = utils.table_to_book(table)\r\n      let output = write(et, {\r\n        bookType: \"xlsx\",\r\n        bookSST: true,\r\n        type: \"array\"\r\n      })\r\n\r\n      try {\r\n        FileSaver.saveAs(new Blob([output], { type: \"application/octet-stream\" }), `${name}.xlsx`)\r\n      } catch (e) { }\r\n\r\n      return output\r\n    },\r\n    errorCorrect() {\r\n      var that = this\r\n      that.loading = true\r\n      var context = that.textarea\r\n      var key = that.input\r\n      if (context === '' || key === '') {\r\n        this.$message({\r\n          showClose: true,\r\n          message: '输入内容不能为空',\r\n          type: 'warning'\r\n        })\r\n        that.result = ''\r\n        that.visible = false\r\n      } else {\r\n        // 请求后端API服务，请求方法为post，请求体字段为json格式 text\r\n        axios.post('http://127.0.0.1:8000/v1/textCorrect', {\r\n          text: that.textarea,\r\n          key: that.input\r\n        }).then((response) => {\r\n          console.log(response)\r\n          that.result = response.data.correctionResults.toString()\r\n          that.tableData = response.data.correctionResults\r\n          console.log(response.data.correctionResults)\r\n          that.visible = true\r\n          that.loading = false\r\n          that.$message({\r\n            showClose: true,\r\n            message: 'Success！',\r\n            type: 'success'\r\n          })\r\n        }).catch((error) => {\r\n          console.log(error)\r\n          that.result = ''\r\n          that.visible = false\r\n          that.$message({\r\n            showClose: true,\r\n            message: '请求出现异常！',\r\n            type: 'error'\r\n          })\r\n        })\r\n      }\r\n    },\r\n    beforeUpload(file) {\r\n      this.fileList = [file]\r\n      // 读取txt文件\r\n      this.read(file)\r\n      this.$message({\r\n        showClose: true,\r\n        message: 'txt文本内容导入成功！',\r\n        type: 'success'\r\n      })\r\n      return false\r\n    },\r\n    read(f) {\r\n      const rd = new FileReader()\r\n      var that = this\r\n      rd.onload = e => {\r\n      // this.readAsArrayBuffer函数内，会回调this.onload函数。在这里处理结果\r\n        const cont = rd.reading({ encode: 'UTF-8' })\r\n        console.log(cont)\r\n        that.textarea = cont\r\n      }\r\n      rd.readAsBinaryString(f)\r\n    },\r\n    saveResult() {\r\n      var tempData = this.result\r\n      if (tempData === '') {\r\n        this.$message({\r\n          showClose: true,\r\n          message: '输入内容为空！',\r\n          type: 'warning'\r\n        })\r\n      } else {\r\n        var tempResult = new Blob([tempData], { type: 'text/plain;charset=utf-8' })\r\n        saveAs(tempResult, 'ChatGPT结果.txt')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  .tip {\r\n    font-family: Helvetica Neue, Arial, Helvetica, sans-serif;\r\n\tfont-size: 14px;\r\n\tfont-weight:normal;\r\n\tmargin-top: 10px;\r\n  margin-bottom: 10px;\r\n  }\r\n</style>\r\n"]}]}