{"remainingRequest":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\onlinecsc\\index.vue?vue&type=style&index=0&id=42861c19&scoped=true&lang=css&","dependencies":[{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\onlinecsc\\index.vue","mtime":1683358533307},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgLnRpcCB7CiAgICBmb250LWZhbWlseTogUGluZ0ZhbmcgU0MsIEhlbHZldGljYSBOZXVlLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOwoJZm9udC1zaXplOiAxNHB4OwoJZm9udC13ZWlnaHQ6bm9ybWFsOwoJbWFyZ2luLXRvcDogMTBweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIH0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAiKA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/onlinecsc","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-col :span=\"12\">\n    <div class=\"tip\">\n      请输入需要提取的文本:\n    </div>\n    <el-input v-model=\"textarea\" type=\"textarea\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable />\n    <div class=\"tip\" style=\"padding-top:10px\">\n      请输入提取的信息类型（用逗号隔开）:\n    </div>\n    <el-input v-model=\"input\" type=\"input\" :disabled=\"stage\" :rows=\"11\" placeholder=\"请输入\" clearable/>\n    <div style=\"padding-top:10px;padding-bottom:10px;\">\n      <el-button type=\"primary\" @click=\"errorCorrect()\" :loading='loading'>开始提取</el-button>\n      <el-button type=\"basic\"  style=\"margin-left:24px;margin-top:16px;\" @click=\"handleDownload('text-demo')\">导出Excel</el-button>\n    </div>\n    </el-col>\n    <el-col :span=\"12\">\n    <el-table v-loading=\"loading\" id=\"excel_table\" :data=\"tableData\" style=\"width: 100%;margin-left:48px;margin-right:48px;\">\n        <el-table-column prop=\"prompt\" label=\"Prompt\"></el-table-column>\n        <el-table-column prop=\"value\" label=\"Value\"></el-table-column>\n    </el-table>\n    </el-col>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { saveAs } from 'file-saver'\nimport FileSaver from 'file-saver'\nimport { write, utils } from 'xlsx';\n\nexport default {\n  data() {\n    return {\n      textarea: '',\n      input: '',\n      result: '',\n      stage: false,\n      visible: false,\n      fileList: '',\n      tableData: [],\n      loading: false,\n    }\n  },\n  beforeCreate() {\n    // 读取文件\n    FileReader.prototype.reading = function({ encode } = 'pms') {\n      const bytes = new Uint8Array(this.result) // 无符号整型数组\n      const text = new TextDecoder(encode || 'UTF-8').decode(bytes)\n      return text\n    }\n    /* 重写readAsBinaryString函数 */\n    FileReader.prototype.readAsBinaryString = function(f) {\n      // 如果this未重写onload函数，则创建一个公共处理方式\n      if (!this.onload) {\n        this.onload = e => { // 在this.onload函数中，完成公共处理\n          const rs = this.reading()\n          console.log(rs)\n        }\n      }\n      this.readAsArrayBuffer(f) // 内部会回调this.onload方法\n    }\n  },\n  methods: {\n    //导出excel\n    handleDownload(name) {\n      let table = document.getElementById(\"excel_table\")\n      let et = utils.table_to_book(table)\n      let output = write(et, {\n        bookType: \"xlsx\",\n        bookSST: true,\n        type: \"array\"\n      })\n\n      try {\n        FileSaver.saveAs(new Blob([output], { type: \"application/octet-stream\" }), `${name}.xlsx`)\n      } catch (e) { }\n\n      return output\n    },\n    errorCorrect() {\n      var that = this\n      that.loading = true\n      var context = that.textarea\n      var key = that.input\n      if (context === '' || key === '') {\n        this.$message({\n          showClose: true,\n          message: '输入内容不能为空',\n          type: 'warning'\n        })\n        that.result = ''\n        that.visible = false\n      } else {\n        // 请求后端API服务，请求方法为post，请求体字段为json格式 text\n        axios.post('http://localhost:8000/api/gpt/textCorrect', {\n          text: that.textarea, key: that.input\n        }).then((response) => {\n          console.log(response)\n          that.result = response.data.correctionResults.toString()\n          that.tableData = response.data.correctionResults\n          console.log(response.data.correctionResults)\n          that.visible = true\n          that.loading = false\n          that.$message({\n            showClose: true,\n            message: 'Success！',\n            type: 'success'\n          })\n        }).catch((error) => {\n          console.log(error)\n          that.result = ''\n          that.visible = false\n          that.$message({\n            showClose: true,\n            message: '请求出现异常！',\n            type: 'error'\n          })\n        })\n      }\n    },\n    beforeUpload(file) {\n      this.fileList = [file]\n      // 读取txt文件\n      this.read(file)\n      this.$message({\n        showClose: true,\n        message: 'txt文本内容导入成功！',\n        type: 'success'\n      })\n      return false\n    },\n    read(f) {\n      const rd = new FileReader()\n      var that = this\n      rd.onload = e => {\n      // this.readAsArrayBuffer函数内，会回调this.onload函数。在这里处理结果\n        const cont = rd.reading({ encode: 'UTF-8' })\n        console.log(cont)\n        that.textarea = cont\n      }\n      rd.readAsBinaryString(f)\n    },\n    saveResult() {\n      var tempData = this.result\n      if (tempData === '') {\n        this.$message({\n          showClose: true,\n          message: '输入内容为空！',\n          type: 'warning'\n        })\n      } else {\n        var tempResult = new Blob([tempData], { type: 'text/plain;charset=utf-8' })\n        saveAs(tempResult, 'ChatGPT结果.txt')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .tip {\n    font-family: PingFang SC, Helvetica Neue, Arial, Helvetica, sans-serif;\n\tfont-size: 14px;\n\tfont-weight:normal;\n\tmargin-top: 10px;\n  margin-bottom: 10px;\n  }\n</style>\n"]}]}