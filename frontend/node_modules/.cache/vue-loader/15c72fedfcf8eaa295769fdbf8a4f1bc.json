{"remainingRequest":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MLAIII\\MLAI\\frontend\\src\\views\\documentcsc\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MLAIII\\MLAI\\frontend\\src\\views\\documentcsc\\index.vue","mtime":1679274921287},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1678687255549},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\MLAIII\\MLAI\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1678687256835}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnDQppbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJw0KaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJw0KaW1wb3J0IEZpbGVTYXZlciBmcm9tICdmaWxlLXNhdmVyJw0KaW1wb3J0IHsgd3JpdGUsIHV0aWxzIH0gZnJvbSAneGxzeCc7DQoNCg0KDQpleHBvcnQgZGVmYXVsdCB7DQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGZpbGVEYXRhOiAnJywNCiAgICAgIGlucHV0OiAnJywNCiAgICAgIHZpc2libGU6IGZhbHNlLA0KICAgICAgdGFibGVEYXRhOiBbXSwNCiAgICAgIGltYWdlVXJsOiAnJywNCiAgICAgIGZpdDogJ2NvdmVyJywNCiAgICAgIGxvYWRpbmc6IGZhbHNlLA0KICAgICAgdmFsdWU6IHJlZigxKSwNCiAgICAgIG9wdGlvbnM6IFsNCiAgICAgICAgew0KICAgICAgICAgIHZhbHVlOiAxLA0KICAgICAgICAgIGxhYmVsOiAnRVJOSUUtMy4wJywNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIHZhbHVlOiAyLA0KICAgICAgICAgIGxhYmVsOiAnZ3B0LTMuNS10dXJibycsDQogICAgICAgIH0NCiAgICAgIF0NCiAgICB9DQogIH0sDQoNCiAgYmVmb3JlQ3JlYXRlKCkgew0KICAgIC8vIOivu+WPluaWh+S7tg0KICAgIEZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRpbmcgPSBmdW5jdGlvbiAoeyBlbmNvZGUgfSA9ICdwbXMnKSB7DQogICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHRoaXMucmVzdWx0KSAvLyDml6DnrKblj7fmlbTlnovmlbDnu4QNCiAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RlIHx8ICdVVEYtOCcpLmRlY29kZShieXRlcykNCiAgICAgIHJldHVybiB0ZXh0DQogICAgfQ0KICAgIC8qIOmHjeWGmXJlYWRBc0JpbmFyeVN0cmluZ+WHveaVsCAqLw0KICAgIEZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRBc0JpbmFyeVN0cmluZyA9IGZ1bmN0aW9uIChmKSB7DQogICAgICAvLyDlpoLmnpx0aGlz5pyq6YeN5YaZb25sb2Fk5Ye95pWw77yM5YiZ5Yib5bu65LiA5Liq5YWs5YWx5aSE55CG5pa55byPDQogICAgICBpZiAoIXRoaXMub25sb2FkKSB7DQogICAgICAgIHRoaXMub25sb2FkID0gZSA9PiB7IC8vIOWcqHRoaXMub25sb2Fk5Ye95pWw5Lit77yM5a6M5oiQ5YWs5YWx5aSE55CGDQogICAgICAgICAgY29uc3QgcnMgPSB0aGlzLnJlYWRpbmcoKQ0KICAgICAgICAgIGNvbnNvbGUubG9nKHJzKQ0KICAgICAgICB9DQogICAgICB9DQogICAgICB0aGlzLnJlYWRBc0FycmF5QnVmZmVyKGYpIC8vIOWGhemDqOS8muWbnuiwg3RoaXMub25sb2Fk5pa55rOVDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQoNCiAgICBoYW5kbGVEb3dubG9hZChuYW1lKSB7DQogICAgICBsZXQgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXhjZWxfdGFibGUiKQ0KICAgICAgbGV0IGV0ID0gdXRpbHMudGFibGVfdG9fYm9vayh0YWJsZSkNCiAgICAgIGxldCBvdXRwdXQgPSB3cml0ZShldCwgew0KICAgICAgICBib29rVHlwZTogInhsc3giLA0KICAgICAgICBib29rU1NUOiB0cnVlLA0KICAgICAgICB0eXBlOiAiYXJyYXkiDQogICAgICB9KQ0KDQogICAgICB0cnkgew0KICAgICAgICBGaWxlU2F2ZXIuc2F2ZUFzKG5ldyBCbG9iKFtvdXRwdXRdLCB7IHR5cGU6ICJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iIH0pLCBgJHtuYW1lfS54bHN4YCkNCiAgICAgIH0gY2F0Y2ggKGUpIHsgfQ0KDQogICAgICByZXR1cm4gb3V0cHV0DQogICAgfSwNCg0KDQogICAgLy8g5YKo5a2Y6YCJ5oup55qEZmlsZeaWh+S7tg0KICAgIHVwbG9hZEltZyhmaWxlKSB7DQogICAgICB0aGlzLmZpbGVEYXRhID0gZmlsZS5maWxlDQogICAgICBjb25zb2xlLmxvZyhmaWxlLmZpbGUpDQogICAgICB0aGlzLiRtZXNzYWdlKHsNCiAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLA0KICAgICAgICBtZXNzYWdlOiAn5paH5qGj5LiK5Lyg5oiQ5Yqf77yBJywNCiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnDQogICAgICB9KQ0KICAgIH0sDQogICAgLy8g5L+d5a2Y6K+G5Yir57uT5p6cDQogICAgc2F2ZVJlc3VsdCgpIHsNCiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZmlsZUxpc3QpDQogICAgICB2YXIgdGVtcERhdGEgPSB0aGlzLmltZ0NzY1Jlc3VsdA0KICAgICAgaWYgKHRlbXBEYXRhID09PSAnJykgew0KICAgICAgICB0aGlzLiRtZXNzYWdlKHsNCiAgICAgICAgICBzaG93Q2xvc2U6IHRydWUsDQogICAgICAgICAgbWVzc2FnZTogJ+ivhuWIq+e7k+aenOWGheWuueS4uuepuu+8gScsDQogICAgICAgICAgdHlwZTogJ3dhcm5pbmcnDQogICAgICAgIH0pDQogICAgICB9IGVsc2Ugew0KICAgICAgICB2YXIgdGVtcFJlc3VsdCA9IG5ldyBCbG9iKFt0ZW1wRGF0YV0sIHsgdHlwZTogJ3RleHQvcGxhaW47Y2hhcnNldD11dGYtOCcgfSkNCiAgICAgICAgc2F2ZUFzKHRlbXBSZXN1bHQsICfmlofmoaPor4bliKvnu5PmnpwudHh0JykNCiAgICAgIH0NCiAgICB9LA0KICAgIGltYWdlQ29ycmVjdCgpIHsNCiAgICAgIHZhciB0aGF0ID0gdGhpcw0KICAgICAgdGhhdC5sb2FkaW5nID0gdHJ1ZQ0KICAgICAgaWYgKHRoYXQuZmlsZURhdGEgPT09ICcnKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uoew0KICAgICAgICAgIHNob3dDbG9zZTogdHJ1ZSwNCiAgICAgICAgICBtZXNzYWdlOiAn6K+35YWI6YCJ5oup6KaB6L+b6KGM6K+G5Yir55qE5paH5qGj5paH5Lu277yBJywNCiAgICAgICAgICB0eXBlOiAnd2FybmluZycNCiAgICAgICAgfSkNCiAgICAgICAgdGhhdC5pbWdDc2NSZXN1bHQgPSAnJw0KICAgICAgICB0aGF0LnZpc2libGUgPSBmYWxzZQ0KICAgICAgICByZXR1cm4NCiAgICAgIH0NCiAgICAgIHZhciBjb25maWcgPSB7DQogICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnDQogICAgICAgIH0sDQogICAgICAgIHBhcmFtczogew0KICAgICAgICAgIGtleTogdGhhdC5pbnB1dCwNCiAgICAgICAgICB2YWx1ZTogdGhhdC52YWx1ZQ0KICAgICAgICB9DQogICAgICB9DQogICAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpDQogICAgICBmb3JtLmFwcGVuZCgnZmlsZScsIHRoYXQuZmlsZURhdGEpDQogICAgICAvLyDor7fmsYLlkI7nq69BUEnmnI3liqHvvIzor7fmsYLmlrnms5XkuLpwb3N0DQogICAgICBheGlvcy5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjgwMDAvdjEvZG9jQ29ycmVjdCcsIGZvcm0sIGNvbmZpZykudGhlbigocmVzcG9uc2UpID0+IHsNCiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpDQogICAgICAgIHRoYXQuaW1nQ3NjUmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5jb3JyZWN0aW9uUmVzdWx0cw0KICAgICAgICB0aGF0LnRhYmxlRGF0YSA9IHJlc3BvbnNlLmRhdGEuY29ycmVjdGlvblJlc3VsdHMNCiAgICAgICAgY29uc29sZS5sb2codGhhdC50YWJsZURhdGEpDQogICAgICAgIHRoYXQudmlzaWJsZSA9IHRydWUNCiAgICAgICAgdGhhdC5sb2FkaW5nID0gZmFsc2UNCiAgICAgICAgdGhhdC4kbWVzc2FnZSh7DQogICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLA0KICAgICAgICAgIG1lc3NhZ2U6ICfmlofmoaPor4bliKvlrozmiJDvvIEnLA0KICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJw0KICAgICAgICB9KQ0KICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7DQogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQ0KICAgICAgICB0aGF0LmltZ0NzY1Jlc3VsdCA9ICcnDQogICAgICAgIHRoYXQudmlzaWJsZSA9IGZhbHNlDQogICAgICAgIHRoYXQuJG1lc3NhZ2Uoew0KICAgICAgICAgIHNob3dDbG9zZTogdHJ1ZSwNCiAgICAgICAgICBtZXNzYWdlOiAn6K+35rGC5Ye6546w5byC5bi477yBJywNCiAgICAgICAgICB0eXBlOiAnZXJyb3InDQogICAgICAgIH0pDQogICAgICB9KQ0KICAgIH0NCiAgfQ0KfQ0KDQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAsDA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/documentcsc","sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-col :span=\"12\">\r\n      <el-row>\r\n        <div class=\"tip\">\r\n          请上传要提取的文档\r\n        </div>\r\n        <el-upload class=\"upload-demo\" action=\"\" :limit=\"10\" :http-request=\"uploadImg\" accept=\".pdf,.doc,.docx\"\r\n          style=\"padding-bottom:24px;\">\r\n          <el-button type=\"primary\">点击上传</el-button>\r\n        </el-upload>\r\n      </el-row>\r\n      <el-row>\r\n        <div class=\"tip\">\r\n          请输入需要提取的信息（中文逗号隔开，尽可能描述准确）\r\n        </div>\r\n        <el-input v-model=\"input\" type=\"input\" :rows=\"8\" style=\"padding-bottom:10px;\" />\r\n      </el-row>\r\n      <el-row style=\"padding-top:10px;padding-bottom:30px;\">\r\n        <div class=\"tip\">\r\n          模型选择\r\n        </div>\r\n        <el-select v-model=\"value\" class=\"m-2\" placeholder=\"Select\" size=\"large\" style=\"padding-right:24px\">\r\n          <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\r\n        </el-select>\r\n        <el-button type=\"primary\" :loading='loading'  @click=\"imageCorrect()\">开始提取</el-button>\r\n        <el-button type=\"basic\"  @click=\"handleDownload('demo')\">导出Excel</el-button>\r\n      </el-row>\r\n      <div v-show=\"visible\" class=\"tip\">\r\n        文档识别和识别结果：\r\n      </div>\r\n      <el-table v-loading=\"loading\" id=\"excel_table\" :data=\"tableData\" style=\"width: 100%\">\r\n        <el-table-column prop=\"prompt\" label=\"Prompt\"></el-table-column>\r\n        <el-table-column prop=\"value\" label=\"Value\"></el-table-column>\r\n      </el-table>\r\n    </el-col>\r\n    <el-col :span=\"10\">\r\n      <div class=\"demo-image__error\" style=\"text-align: center;\">\r\n        <div class=\"block\" style=\"padding-top:24px;padding-bottom:10px;\">\r\n          <span class=\"demonstration\"></span>\r\n        </div>\r\n        <el-image style=\"padding-left:48px;\" :src=\"imageUrl\" :fit=\"fit\">\r\n          <template #error>\r\n            <div class=\"image-slot\">\r\n              <el-icon><icon-picture /></el-icon>\r\n            </div>\r\n          </template>\r\n        </el-image>\r\n      </div>\r\n    </el-col>\r\n  </div>\r\n</template>\r\n\r\n<script >\r\nimport axios from 'axios'\r\nimport { saveAs } from 'file-saver'\r\nimport { ref } from 'vue'\r\nimport FileSaver from 'file-saver'\r\nimport { write, utils } from 'xlsx';\r\n\r\n\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      fileData: '',\r\n      input: '',\r\n      visible: false,\r\n      tableData: [],\r\n      imageUrl: '',\r\n      fit: 'cover',\r\n      loading: false,\r\n      value: ref(1),\r\n      options: [\r\n        {\r\n          value: 1,\r\n          label: 'ERNIE-3.0',\r\n        },\r\n        {\r\n          value: 2,\r\n          label: 'gpt-3.5-turbo',\r\n        }\r\n      ]\r\n    }\r\n  },\r\n\r\n  beforeCreate() {\r\n    // 读取文件\r\n    FileReader.prototype.reading = function ({ encode } = 'pms') {\r\n      const bytes = new Uint8Array(this.result) // 无符号整型数组\r\n      const text = new TextDecoder(encode || 'UTF-8').decode(bytes)\r\n      return text\r\n    }\r\n    /* 重写readAsBinaryString函数 */\r\n    FileReader.prototype.readAsBinaryString = function (f) {\r\n      // 如果this未重写onload函数，则创建一个公共处理方式\r\n      if (!this.onload) {\r\n        this.onload = e => { // 在this.onload函数中，完成公共处理\r\n          const rs = this.reading()\r\n          console.log(rs)\r\n        }\r\n      }\r\n      this.readAsArrayBuffer(f) // 内部会回调this.onload方法\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    handleDownload(name) {\r\n      let table = document.getElementById(\"excel_table\")\r\n      let et = utils.table_to_book(table)\r\n      let output = write(et, {\r\n        bookType: \"xlsx\",\r\n        bookSST: true,\r\n        type: \"array\"\r\n      })\r\n\r\n      try {\r\n        FileSaver.saveAs(new Blob([output], { type: \"application/octet-stream\" }), `${name}.xlsx`)\r\n      } catch (e) { }\r\n\r\n      return output\r\n    },\r\n\r\n\r\n    // 储存选择的file文件\r\n    uploadImg(file) {\r\n      this.fileData = file.file\r\n      console.log(file.file)\r\n      this.$message({\r\n        showClose: true,\r\n        message: '文档上传成功！',\r\n        type: 'success'\r\n      })\r\n    },\r\n    // 保存识别结果\r\n    saveResult() {\r\n      // console.log(this.fileList)\r\n      var tempData = this.imgCscResult\r\n      if (tempData === '') {\r\n        this.$message({\r\n          showClose: true,\r\n          message: '识别结果内容为空！',\r\n          type: 'warning'\r\n        })\r\n      } else {\r\n        var tempResult = new Blob([tempData], { type: 'text/plain;charset=utf-8' })\r\n        saveAs(tempResult, '文档识别结果.txt')\r\n      }\r\n    },\r\n    imageCorrect() {\r\n      var that = this\r\n      that.loading = true\r\n      if (that.fileData === '') {\r\n        this.$message({\r\n          showClose: true,\r\n          message: '请先选择要进行识别的文档文件！',\r\n          type: 'warning'\r\n        })\r\n        that.imgCscResult = ''\r\n        that.visible = false\r\n        return\r\n      }\r\n      var config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        params: {\r\n          key: that.input,\r\n          value: that.value\r\n        }\r\n      }\r\n      var form = new FormData()\r\n      form.append('file', that.fileData)\r\n      // 请求后端API服务，请求方法为post\r\n      axios.post('http://127.0.0.1:8000/v1/docCorrect', form, config).then((response) => {\r\n        console.log(response)\r\n        that.imgCscResult = response.data.correctionResults\r\n        that.tableData = response.data.correctionResults\r\n        console.log(that.tableData)\r\n        that.visible = true\r\n        that.loading = false\r\n        that.$message({\r\n          showClose: true,\r\n          message: '文档识别完成！',\r\n          type: 'success'\r\n        })\r\n      }).catch((error) => {\r\n        console.log(error)\r\n        that.imgCscResult = ''\r\n        that.visible = false\r\n        that.$message({\r\n          showClose: true,\r\n          message: '请求出现异常！',\r\n          type: 'error'\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.tip {\r\n  font-family: Helvetica Neue, Arial, Helvetica, sans-serif;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  margin-bottom: 20px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"]}]}