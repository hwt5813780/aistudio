{"remainingRequest":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\documentcsc\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\src\\views\\documentcsc\\index.vue","mtime":1681808881159},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1678687255549},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678687252373},{"path":"D:\\fastapi-skeleton\\fastapi-skeleton-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1678687256835}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcicKaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJwppbXBvcnQgRmlsZVNhdmVyIGZyb20gJ2ZpbGUtc2F2ZXInCmltcG9ydCB7IHdyaXRlLCB1dGlscyB9IGZyb20gJ3hsc3gnOwoKCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZpbGVEYXRhOiAnJywKICAgICAgaW5wdXQ6ICcnLAogICAgICB2aXNpYmxlOiBmYWxzZSwKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgaW1hZ2VVcmw6ICcnLAogICAgICBmaXQ6ICdjb3ZlcicsCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICB2YWx1ZTogcmVmKDEpLAogICAgICBvcHRpb25zOiBbCiAgICAgICAgewogICAgICAgICAgdmFsdWU6IDEsCiAgICAgICAgICBsYWJlbDogJ0VSTklFLTMuMCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogMiwKICAgICAgICAgIGxhYmVsOiAnZ3B0LTMuNS10dXJibycsCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgfSwKCiAgYmVmb3JlQ3JlYXRlKCkgewogICAgLy8g6K+75Y+W5paH5Lu2CiAgICBGaWxlUmVhZGVyLnByb3RvdHlwZS5yZWFkaW5nID0gZnVuY3Rpb24gKHsgZW5jb2RlIH0gPSAncG1zJykgewogICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHRoaXMucmVzdWx0KSAvLyDml6DnrKblj7fmlbTlnovmlbDnu4QKICAgICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGUgfHwgJ1VURi04JykuZGVjb2RlKGJ5dGVzKQogICAgICByZXR1cm4gdGV4dAogICAgfQogICAgLyog6YeN5YaZcmVhZEFzQmluYXJ5U3RyaW5n5Ye95pWwICovCiAgICBGaWxlUmVhZGVyLnByb3RvdHlwZS5yZWFkQXNCaW5hcnlTdHJpbmcgPSBmdW5jdGlvbiAoZikgewogICAgICAvLyDlpoLmnpx0aGlz5pyq6YeN5YaZb25sb2Fk5Ye95pWw77yM5YiZ5Yib5bu65LiA5Liq5YWs5YWx5aSE55CG5pa55byPCiAgICAgIGlmICghdGhpcy5vbmxvYWQpIHsKICAgICAgICB0aGlzLm9ubG9hZCA9IGUgPT4geyAvLyDlnKh0aGlzLm9ubG9hZOWHveaVsOS4re+8jOWujOaIkOWFrOWFseWkhOeQhgogICAgICAgICAgY29uc3QgcnMgPSB0aGlzLnJlYWRpbmcoKQogICAgICAgICAgY29uc29sZS5sb2cocnMpCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMucmVhZEFzQXJyYXlCdWZmZXIoZikgLy8g5YaF6YOo5Lya5Zue6LCDdGhpcy5vbmxvYWTmlrnms5UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKCiAgICBoYW5kbGVEb3dubG9hZChuYW1lKSB7CiAgICAgIGxldCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJleGNlbF90YWJsZSIpCiAgICAgIGxldCBldCA9IHV0aWxzLnRhYmxlX3RvX2Jvb2sodGFibGUpCiAgICAgIGxldCBvdXRwdXQgPSB3cml0ZShldCwgewogICAgICAgIGJvb2tUeXBlOiAieGxzeCIsCiAgICAgICAgYm9va1NTVDogdHJ1ZSwKICAgICAgICB0eXBlOiAiYXJyYXkiCiAgICAgIH0pCgogICAgICB0cnkgewogICAgICAgIEZpbGVTYXZlci5zYXZlQXMobmV3IEJsb2IoW291dHB1dF0sIHsgdHlwZTogImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIgfSksIGAke25hbWV9Lnhsc3hgKQogICAgICB9IGNhdGNoIChlKSB7IH0KCiAgICAgIHJldHVybiBvdXRwdXQKICAgIH0sCgoKICAgIC8vIOWCqOWtmOmAieaLqeeahGZpbGXmlofku7YKICAgIHVwbG9hZEltZyhmaWxlKSB7CiAgICAgIHRoaXMuZmlsZURhdGEgPSBmaWxlLmZpbGUKICAgICAgY29uc29sZS5sb2coZmlsZS5maWxlKQogICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgbWVzc2FnZTogJ+aWh+aho+S4iuS8oOaIkOWKn++8gScsCiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnCiAgICAgIH0pCiAgICB9LAogICAgLy8g5L+d5a2Y6K+G5Yir57uT5p6cCiAgICBzYXZlUmVzdWx0KCkgewogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmZpbGVMaXN0KQogICAgICB2YXIgdGVtcERhdGEgPSB0aGlzLmltZ0NzY1Jlc3VsdAogICAgICBpZiAodGVtcERhdGEgPT09ICcnKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+G5Yir57uT5p6c5YaF5a655Li656m677yBJywKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICAgIH0pCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHRlbXBSZXN1bHQgPSBuZXcgQmxvYihbdGVtcERhdGFdLCB7IHR5cGU6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgnIH0pCiAgICAgICAgc2F2ZUFzKHRlbXBSZXN1bHQsICfmlofmoaPor4bliKvnu5PmnpwudHh0JykKICAgICAgfQogICAgfSwKICAgIGltYWdlQ29ycmVjdCgpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzCiAgICAgIHRoYXQubG9hZGluZyA9IHRydWUKICAgICAgaWYgKHRoYXQuZmlsZURhdGEgPT09ICcnKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+35YWI6YCJ5oup6KaB6L+b6KGM6K+G5Yir55qE5paH5qGj5paH5Lu277yBJywKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICAgIH0pCiAgICAgICAgdGhhdC5pbWdDc2NSZXN1bHQgPSAnJwogICAgICAgIHRoYXQudmlzaWJsZSA9IGZhbHNlCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgdmFyIGNvbmZpZyA9IHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgfSwKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgIGtleTogdGhhdC5pbnB1dCwKICAgICAgICAgIHZhbHVlOiB0aGF0LnZhbHVlCiAgICAgICAgfQogICAgICB9CiAgICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKCkKICAgICAgZm9ybS5hcHBlbmQoJ2ZpbGUnLCB0aGF0LmZpbGVEYXRhKQogICAgICAvLyDor7fmsYLlkI7nq69BUEnmnI3liqHvvIzor7fmsYLmlrnms5XkuLpwb3N0CiAgICAgIGF4aW9zLnBvc3QoJ2h0dHA6Ly8xNzIuMjEuMTA4LjU3OjgwMDAvYXBpL2dwdC9kb2NDb3JyZWN0JywgZm9ybSwgY29uZmlnKS50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKQogICAgICAgIHRoYXQuaW1nQ3NjUmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5jb3JyZWN0aW9uUmVzdWx0cwogICAgICAgIHRoYXQudGFibGVEYXRhID0gcmVzcG9uc2UuZGF0YS5jb3JyZWN0aW9uUmVzdWx0cwogICAgICAgIGNvbnNvbGUubG9nKHRoYXQudGFibGVEYXRhKQogICAgICAgIHRoYXQudmlzaWJsZSA9IHRydWUKICAgICAgICB0aGF0LmxvYWRpbmcgPSBmYWxzZQogICAgICAgIHRoYXQuJG1lc3NhZ2UoewogICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+aWh+aho+ivhuWIq+WujOaIkO+8gScsCiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgICB9KQogICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikKICAgICAgICB0aGF0LmltZ0NzY1Jlc3VsdCA9ICcnCiAgICAgICAgdGhhdC52aXNpYmxlID0gZmFsc2UKICAgICAgICB0aGF0LiRtZXNzYWdlKHsKICAgICAgICAgIHNob3dDbG9zZTogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fmsYLlh7rnjrDlvILluLjvvIEnLAogICAgICAgICAgdHlwZTogJ2Vycm9yJwogICAgICAgIH0pCiAgICAgIH0pCiAgICB9CiAgfQp9Cgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAsDA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/documentcsc","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-col :span=\"12\">\n      <el-row>\n        <div class=\"tip\">\n          请上传要提取的文档\n        </div>\n        <el-upload class=\"upload-demo\" action=\"\" :limit=\"10\" :http-request=\"uploadImg\" accept=\".pdf,.doc,.docx\"\n          style=\"padding-bottom:24px;\">\n          <el-button type=\"primary\">点击上传</el-button>\n        </el-upload>\n      </el-row>\n      <el-row>\n        <div class=\"tip\">\n          请输入需要提取的信息（中文逗号隔开，尽可能描述准确）\n        </div>\n        <el-input v-model=\"input\" type=\"input\" :rows=\"8\" style=\"padding-bottom:10px;\" />\n      </el-row>\n      <el-row style=\"padding-top:10px;padding-bottom:30px;\">\n        <div class=\"tip\">\n          模型选择\n        </div>\n        <el-select v-model=\"value\" class=\"m-2\" placeholder=\"Select\" size=\"large\" style=\"padding-right:24px\">\n          <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\n        </el-select>\n        <el-button type=\"primary\" :loading='loading'  @click=\"imageCorrect()\">开始提取</el-button>\n        <el-button type=\"basic\"  @click=\"handleDownload('demo')\">导出Excel</el-button>\n      </el-row>\n      <div v-show=\"visible\" class=\"tip\">\n        文档识别和识别结果：\n      </div>\n      <el-table v-loading=\"loading\" id=\"excel_table\" :data=\"tableData\" style=\"width: 100%\">\n        <el-table-column prop=\"prompt\" label=\"Prompt\"></el-table-column>\n        <el-table-column prop=\"value\" label=\"Value\"></el-table-column>\n      </el-table>\n    </el-col>\n    <el-col :span=\"10\">\n      <div class=\"demo-image__error\" style=\"text-align: center;\">\n        <div class=\"block\" style=\"padding-top:24px;padding-bottom:10px;\">\n          <span class=\"demonstration\"></span>\n        </div>\n        <el-image style=\"padding-left:48px;\" :src=\"imageUrl\" :fit=\"fit\">\n          <template #error>\n            <div class=\"image-slot\">\n              <el-icon><icon-picture /></el-icon>\n            </div>\n          </template>\n        </el-image>\n      </div>\n    </el-col>\n  </div>\n</template>\n\n<script >\nimport axios from 'axios'\nimport { saveAs } from 'file-saver'\nimport { ref } from 'vue'\nimport FileSaver from 'file-saver'\nimport { write, utils } from 'xlsx';\n\n\n\nexport default {\n  data() {\n    return {\n      fileData: '',\n      input: '',\n      visible: false,\n      tableData: [],\n      imageUrl: '',\n      fit: 'cover',\n      loading: false,\n      value: ref(1),\n      options: [\n        {\n          value: 1,\n          label: 'ERNIE-3.0',\n        },\n        {\n          value: 2,\n          label: 'gpt-3.5-turbo',\n        }\n      ]\n    }\n  },\n\n  beforeCreate() {\n    // 读取文件\n    FileReader.prototype.reading = function ({ encode } = 'pms') {\n      const bytes = new Uint8Array(this.result) // 无符号整型数组\n      const text = new TextDecoder(encode || 'UTF-8').decode(bytes)\n      return text\n    }\n    /* 重写readAsBinaryString函数 */\n    FileReader.prototype.readAsBinaryString = function (f) {\n      // 如果this未重写onload函数，则创建一个公共处理方式\n      if (!this.onload) {\n        this.onload = e => { // 在this.onload函数中，完成公共处理\n          const rs = this.reading()\n          console.log(rs)\n        }\n      }\n      this.readAsArrayBuffer(f) // 内部会回调this.onload方法\n    }\n  },\n  methods: {\n\n    handleDownload(name) {\n      let table = document.getElementById(\"excel_table\")\n      let et = utils.table_to_book(table)\n      let output = write(et, {\n        bookType: \"xlsx\",\n        bookSST: true,\n        type: \"array\"\n      })\n\n      try {\n        FileSaver.saveAs(new Blob([output], { type: \"application/octet-stream\" }), `${name}.xlsx`)\n      } catch (e) { }\n\n      return output\n    },\n\n\n    // 储存选择的file文件\n    uploadImg(file) {\n      this.fileData = file.file\n      console.log(file.file)\n      this.$message({\n        showClose: true,\n        message: '文档上传成功！',\n        type: 'success'\n      })\n    },\n    // 保存识别结果\n    saveResult() {\n      // console.log(this.fileList)\n      var tempData = this.imgCscResult\n      if (tempData === '') {\n        this.$message({\n          showClose: true,\n          message: '识别结果内容为空！',\n          type: 'warning'\n        })\n      } else {\n        var tempResult = new Blob([tempData], { type: 'text/plain;charset=utf-8' })\n        saveAs(tempResult, '文档识别结果.txt')\n      }\n    },\n    imageCorrect() {\n      var that = this\n      that.loading = true\n      if (that.fileData === '') {\n        this.$message({\n          showClose: true,\n          message: '请先选择要进行识别的文档文件！',\n          type: 'warning'\n        })\n        that.imgCscResult = ''\n        that.visible = false\n        return\n      }\n      var config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        params: {\n          key: that.input,\n          value: that.value\n        }\n      }\n      var form = new FormData()\n      form.append('file', that.fileData)\n      // 请求后端API服务，请求方法为post\n      axios.post('http://172.21.108.57:8000/api/gpt/docCorrect', form, config).then((response) => {\n        console.log(response)\n        that.imgCscResult = response.data.correctionResults\n        that.tableData = response.data.correctionResults\n        console.log(that.tableData)\n        that.visible = true\n        that.loading = false\n        that.$message({\n          showClose: true,\n          message: '文档识别完成！',\n          type: 'success'\n        })\n      }).catch((error) => {\n        console.log(error)\n        that.imgCscResult = ''\n        that.visible = false\n        that.$message({\n          showClose: true,\n          message: '请求出现异常！',\n          type: 'error'\n        })\n      })\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n.tip {\n  font-family: Helvetica Neue, Arial, Helvetica, sans-serif;\n  font-size: 14px;\n  font-weight: normal;\n  margin-bottom: 20px;\n  margin-bottom: 10px;\n}\n</style>\n"]}]}